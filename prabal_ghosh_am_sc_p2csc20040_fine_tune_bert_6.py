# -*- coding: utf-8 -*-
"""PRABAL_GHOSH_AM.SC.P2CSC20040_Fine_tune_BERT_6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SFiNzU0oXhDfqcL49QAVvDwrjkjuziZY

## PRABAL GHOSH         AM.SC.P2CSC20040       ASSIGNMENT-6_(Fine_tune_BERT)
"""

!pip install transformers

from transformers import DistilBertTokenizerFast
from transformers import TFDistilBertForSequenceClassification
import pandas as pd
import numpy as np

import tensorflow as tf

from google.colab import files
uploaded = files.upload()

"""https://www.kaggle.com/lakshmi25npathi/imdb-dataset-of-50k-movie-reviews?select=IMDB+Dataset.csv"""

df = pd.read_csv('IMDB Dataset_validate.csv.zip',compression='zip')

df.head(10)

reviews = df['text'].values.tolist()
labels = df['label'].tolist()

from sklearn.model_selection import train_test_split
training_sentences, validation_sentences, training_labels, validation_labels=train_test_split(reviews,labels,test_size=0.33, random_state=4)

tokenizer = DistilBertTokenizerFast.from_pretrained('distilbert-base-uncased')

tokenizer([training_sentences[0]], truncation=True,padding=True, max_length=128)

train_encodings = tokenizer(training_sentences,
truncation=True,
padding=True)
val_encodings = tokenizer(validation_sentences,
truncation=True,
padding=True)
train_dataset = tf.data.Dataset.from_tensor_slices((
dict(train_encodings),
training_labels
))
val_dataset = tf.data.Dataset.from_tensor_slices((
dict(val_encodings),
validation_labels 
))

model=TFDistilBertForSequenceClassification.from_pretrained('distilbert-base-uncased',num_labels=6)

test_sentence = "This is a really bad Movie. I hate it"
predict_input = tokenizer.encode(test_sentence,
truncation=True,
padding=True,
return_tensors="tf")

model.save_pretrained("/content/drive/MyDrive")

loaded_model = TFDistilBertForSequenceClassification.from_pretrained("/content/drive/MyDrive")

tf_output = loaded_model.predict(predict_input)[0]
tf_prediction = tf.nn.softmax(tf_output, axis=1)
labels = ['Negative','Positive']
label = tf.argmax(tf_prediction, axis=1)
label = label.numpy()
print(labels[label[0]])



